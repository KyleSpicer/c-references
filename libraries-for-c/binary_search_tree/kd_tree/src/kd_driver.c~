#include "kd_bst.h"
#include "llist.h"
#include "spice_file_io.h"

#include <stdlib.h>
#include <stdio.h>
#include <getopt.h>
#include <float.h>
#include <string.h>
#include <ctype.h>

#define MAXCHAR 64
#define SIZENUM 4

// #if (double == 0)
// #if (fabs(double) < DBL_EPSILON)

int main(int argc, char *argv[])
{
	// struct for get opt long options
	int option_index = 0;
	static struct option long_options[] = {
		{"file", required_argument, NULL, 'f'},
		{"help", no_argument, NULL, 'h'},
	};

	char *file_name = NULL;

	// while loop for switch cases
	int opt = 0;
	while ((opt =
		getopt_long(argc, argv, "hf:", long_options,
			    &option_index)) != -1) {
		switch (opt) {
		case 'h':	// help option
			printf("help message\n");
			exit(1);
			break;

		case 'f':	// file option
			file_name = optarg;	// placing user provided file name in var
			break;

		case '?':	// unknown operators entered
			exit(1);
			break;

		default:
			break;
		}
	}

	// open and verify file
	FILE *fp = file_open_and_verify(file_name);
	if (!fp) {
		printf("nothing\n");
		exit(1);
	}

	double x_coord = 0;
	double y_coord = 0;
	int level = 0;

    tree *root = NULL;

	// create root
	char buff[MAXCHAR] = { '\0' };

	while (fgets(buff, MAXCHAR, fp) != 0) {
		int len = strnlen(buff, MAXCHAR) - 1;
		if ('\n' == buff[len]) {
			buff[len] = '\0';
		}

		if (!isdigit(*buff)) { // skips over first line
			continue;
		}
		
        char *broken = NULL;
		double lat = strtod(buff, &broken);
		if (',' != *broken) {
			fprintf(stderr, "%s 1 broke me\n", buff);
			break;
		}

		double lon = strtod(broken + 1, &broken);
		if ('\0' != *broken) {
			fprintf(stderr, "%s 2 broke me\n", buff);
			break;
		}

	    printf("(x: %.1f, y: %.1f)\n", lat, lon);

        tree * new_node = create_node(lon, lat, level);
        if (!new_node){
            printf("didn't create node\n");
        }

        if (!root){
            root = new_node;
        }else {
            insert(root, new_node);
        }
        
        
        
        level++;
	}
    
    printf("%f, %f, %d\n", root->x_coord, root->y_coord, root->level);

	fclose(fp);

}

/*** end of file ***/

int size(tree *root)
{
    if (!root) {
        return 0;
    }
    int count = size(root->left);
    count += size(root->right);


    return 1 + count;
}

void print(tree *root)
{
    if (!root) {
        return;
    }

    print(root->left);
    printf("%d ", root->data);
    print(root->right);
}

tree *delete_node(tree **root, int val)
{
    tree *node = search(*root, val);
    if (!node) {
        return NULL;
    }

    // Handle root node
    if (*root == node) {
        if (!node->left && !node->right) {
            free(*root);
            *root = NULL;
            return *root;
        }
        if (!node->left || !node->right) {
            tree *temp = node->left ? node->left : node->right;
            temp->parent = NULL;
            free(*root);
            *root = temp;
            return *root;
        }
    }

    // Handle if inner node has no right for minimum
    if (!node->right) {
        if (node->parent->data < node->data) {
            node->parent->right = node->left;
        } else {
            node->parent->left = node->left;
        }
        if (node->left) {
            node->left->parent = node->parent;
        }
        free(node);
        return *root;
    }

    // Standard handling
    tree *min = minimum(node->right);
    node->data ^= min->data;
    min->data ^= node->data;
    node->data ^= min->data;
    if (min == node->right) {
        node->right = min->right;
        if (min->right) {
            min->right->parent = node;
        }
    } else {
        min->parent->left = min->right;
        if (min->right) {
            min->right->parent = min->parent;
        }
    }
    free(min);
    return *root;
}

void delete(tree **root)
{
    if (!root || !*root) {
        return;
    }

    delete(&(*root)->left);
    delete(&(*root)->right);
    free(*root);
    *root = NULL;
}
